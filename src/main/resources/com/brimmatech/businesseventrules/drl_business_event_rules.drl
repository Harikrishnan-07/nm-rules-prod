package com.brimmatech.businesseventrules;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Arrays;
import java.time.DayOfWeek;

function String retrieveApplicationDateAndFolderName(RulesDataDto rulesDataDto, int days) {

    String validFolderIds = "";
    String applicationDate = "";
    String folderId = "";
    
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    LocalDate[] holidays = new LocalDate[] {
        
        LocalDate.parse("01/01/2024", formatter),
        
        LocalDate.parse("01/15/2024", formatter),
        
        LocalDate.parse("05/27/2024", formatter),
        
        LocalDate.parse("06/19/2024", formatter),
        
        LocalDate.parse("07/04/2024", formatter),
        
        LocalDate.parse("09/02/2024", formatter),
        
        LocalDate.parse("11/11/2024", formatter),
        LocalDate.parse("11/28/2024", formatter),
        
        LocalDate.parse("11/29/2024", formatter),
        
        LocalDate.parse("12/24/2024", formatter),
        LocalDate.parse("12/25/2024", formatter)
    };
    
    DayOfWeek[] excludedDaysOfWeek =  new DayOfWeek[] { DayOfWeek.SUNDAY };

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("InitialDisclosure".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }
                    
                    if ("ApplicationDate".equals(key)) {
                        applicationDate = value;
                    }
                }
                
                if (applicationDate.length() > 0 && folderId.length() > 0 
                    && isInitialDisclosureDue(applicationDate, days, holidays, excludedDaysOfWeek, formatter)) {
                    
                    if (validFolderIds.length() > 0) {
                        validFolderIds += ",";
                    }
                    
                    validFolderIds += folderId;
                    folderId = "";
                    applicationDate = "";
                }
            }
        }
    }
    return validFolderIds;
}


function boolean isInitialDisclosureDue(String applicationDate, int days, LocalDate[] holidays, DayOfWeek[] excludedDaysOfWeek, DateTimeFormatter formatter) {

    LocalDate start = LocalDate.parse(applicationDate, formatter);
    return calculateElapsedBusinessDays(start, LocalDate.now(), 1, holidays, excludedDaysOfWeek) == days;
}


function String fetchExpiryDueFolderIds(RulesDataDto rulesDataDto, int days) {

    String expDate = "";
    String folderId = "";
    String validFolderIds = "";
    
    System.out.println("Lock Expiry process started...");

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("LockExpiry".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }
                    if ("LockExpDate".equals(key)) {
                        expDate = value;
                    }
                }
                if (expDate.length() > 0 && folderId.length() > 0 && isExpiryDue(expDate, days)) {
                    if (validFolderIds.length() > 0) {
                        validFolderIds += ",";
                    }
                    validFolderIds += folderId;
                    folderId = "";
                    expDate = "";
                }
                System.out.println("Expiry due validation# validFolderIds: "+validFolderIds);
            }
        }
    }
    return validFolderIds;
}


function boolean isExpiryDue(String expDate, int days) {

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    LocalDate expiryLocalDate = LocalDate.parse(expDate, formatter);

    LocalDate expiryDueDate = expiryLocalDate.minusDays(days);
    
    System.out.println("Expiry due validation# expiryLocalDate: "+expiryLocalDate+" expiryDueDate:"+expiryDueDate);

    return expiryDueDate.isEqual(LocalDate.now());
}

function int calculateElapsedBusinessDays(LocalDate start, LocalDate end, int offset,
        LocalDate[] holidays, DayOfWeek[] excludedDaysOfWeek) {
            
    if (excludedDaysOfWeek == null) {
        excludedDaysOfWeek = new DayOfWeek[] {};
    }
    
    int count = 0;
    
    start = start.plusDays(offset);
    
    while (!start.isAfter(end) && count < 10) {
        
        if (!Arrays.stream(holidays).anyMatch(start::equals)
                && !Arrays.stream(excludedDaysOfWeek).anyMatch(start.getDayOfWeek()::equals)) {
                    
            count++;
            
        }
        
        start = start.plusDays(1);
    }
    
    return count;
}

function String fetchFolderIdsOnLockRequest(RulesDataDto rulesDataDto, int lockAction) {

    String lock = "";
    String folderId = "";
    String validFolderIds = "";

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("LockRequest".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }
                    if ("Lock".equals(key)) {
                        lock = value;
                    }
                }
            }
            if (lock.length() > 0 && folderId.length() > 0 && Integer.parseInt(lock) == lockAction) {
                if (validFolderIds.length() > 0) {
                    validFolderIds += ", ";
                }
                validFolderIds += folderId;
            }
        }
    }

    return validFolderIds;
}

function String fetchFolderIdsAffiliate(RulesDataDto rulesDataDto) {
    
    String validFolderIds = "";
    String folderId = "";
    
    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("Affiliate".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }
                }
                
                if (folderId.length() > 0) {
                    
                    if (validFolderIds.length() > 0) {
                        validFolderIds += ",";
                    }
                    
                    validFolderIds += folderId;
                    folderId = "";
                }
            }
        }
    }
    
    return validFolderIds;
}

function String fetchFolderIdsLockDisclosureDue(RulesDataDto rulesDataDto, int days) {

    String validFolderIds = "";
    String rateDate = "";
    String folderId = "";
    
    DateTimeFormatter formatterDate = DateTimeFormatter.ofPattern("MM/dd/yyyy");
	DateTimeFormatter formatterDateTime = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ss a");
    
    LocalDate[] holidays = new LocalDate[] {
        LocalDate.parse("01/01/2024", formatterDate),
        LocalDate.parse("01/15/2024", formatterDate),
        LocalDate.parse("05/27/2024", formatterDate),
        LocalDate.parse("06/19/2024", formatterDate),
        LocalDate.parse("07/04/2024", formatterDate),
        LocalDate.parse("09/02/2024", formatterDate),
        LocalDate.parse("11/11/2024", formatterDate),
        LocalDate.parse("11/28/2024", formatterDate),
        LocalDate.parse("11/29/2024", formatterDate),
        LocalDate.parse("12/24/2024", formatterDate),
        LocalDate.parse("12/25/2024", formatterDate)
    };
    
    DayOfWeek[] excludedDaysOfWeek =  new DayOfWeek[] { DayOfWeek.SUNDAY };

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("LockDisclosure".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }
                    
                    if ("RateDate".equals(key)) {
                        LocalDate rateDateParsed = LocalDate.parse(value, formatterDateTime);
	                    rateDate = rateDateParsed.format(formatterDate);
                        //rateDate = value;
                    }
                }
                
                if (rateDate.length() > 0 && folderId.length() > 0 
                    && isLockDisclosureDue(rateDate, days, holidays, excludedDaysOfWeek, formatterDate)) {
                    
                    if (validFolderIds.length() > 0) {
                        validFolderIds += ",";
                    }
                    
                    validFolderIds += folderId;
                    folderId = "";
                    rateDate = "";
                }
            }
        }
    }

    return validFolderIds;
}

function boolean isLockDisclosureDue(String rateDate, int days, LocalDate[] holidays, DayOfWeek[] excludedDaysOfWeek, DateTimeFormatter formatter) {

    LocalDate start = LocalDate.parse(rateDate, formatter);

    return calculateElapsedBusinessDays(start, LocalDate.now(), 1, holidays, excludedDaysOfWeek) == days;
}

function String getFolderIdsForCreditDecision(RulesDataDto rulesDataDto, int days) {
    String validFolderIds = "";
    String folderId = "";
    String applicationDate = "";

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    DateTimeFormatter withTimeFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ssa");

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("CreditDecision".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }

                    if ("ApplicationDate".equals(key)) {
                        applicationDate = value;
                    }
                }

                if (folderId.length() > 0 && applicationDate.length() > 0) {
                    LocalDate tempApplicationDate = parseApplicationDate(applicationDate, withTimeFormatter);
                    if (isCreditDecisionDue(tempApplicationDate, days)) {
                        if (!validFolderIds.isEmpty()) {
                            validFolderIds += ",";
                        }
                        validFolderIds += folderId;
                        folderId = "";
                        applicationDate = "";
                    }
                }
            }
        }
    }

    return validFolderIds;
}
    
function String getFolderIdsForApplicationSubmitted(RulesDataDto rulesDataDto) {

    String folderId = "";
    String oldData = "";
    String updatedData = "";
    String fieldName = "";
    
    System.out.println("Application Submission process started...");

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {

        String ruleName = rulesData.getRuleName();

        switch (ruleName) {
            case "RespaApplication":
                fieldName = "applicationdate";
                break;
            case "SubmittedToProcessor":
                fieldName = "processordate";
                break;
            case "SubmittedToLender":
                fieldName = "uwsubdatetime";
                break;
            case "UWApprovedClearToClose":
                fieldName = "cleartoclosedatetime";
                break;
        }
        
        System.out.println("ruleName:"+ruleName+":fieldName:"+fieldName);

        List<String> rulesDataList = rulesData.getRuleDataList();

        for (String ruleData : rulesDataList) {
            String[] keyValue = ruleData.split("\\|");

            System.out.println("keyValue Length:"+keyValue.length);

            if (keyValue.length == 2) {
                String key = keyValue[0];
                String value = keyValue[1];

                switch (key) {
                    case "FolderId":
                        folderId = value;
                        break;
                    case "beforeData":
                        oldData = value;
                        break;
                    case "afterData":
                        updatedData = value;
                        break;
                }
            }

         
            if (!folderId.isEmpty() && !oldData.isEmpty() && !updatedData.isEmpty()) {
         
                if (!validCdcPayloadData(oldData, updatedData, fieldName)) {
                    System.out.println("Test failed for rule: " + ruleName + ", field: " + fieldName + ", folder id: " + folderId);
                    folderId = "";
                } else {
                    System.out.println("Test succeeded for rule: " + ruleName + ", field: " + fieldName + ", folder id: " + folderId);
                }
                break;
            }
        }
    }
    
    return folderId;
}

function boolean validCdcPayloadData(String oldData, String updatedData, String fieldName) {
 
    System.out.println("OldData: " + oldData + ", UpdatedData: " + updatedData);
        
    String oldDate = extractRequiredDate(oldData, fieldName);
    String updatedDate = extractRequiredDate(updatedData, fieldName);
        
    System.out.println("OldDate: " + oldDate + ", UpdatedDate: " + updatedDate);
        
    return (oldDate == null || oldDate.isEmpty() || oldDate.equals("null")) 
        && updatedDate != null && !updatedDate.isEmpty() && !updatedDate.equals("null") && !updatedDate.equals("NA");
}

function String extractRequiredDate(String data, String dateFieldName) {
    
    String requiredDate = "NA";
    String tempValue = data.substring(1, data.length() - 1);
    String[] keyValuePairs = tempValue.split(", ");

    for (String pair : keyValuePairs) {
        String[] keyValue = pair.split("=");

        if (dateFieldName.equals(keyValue[0])) {
 
            System.out.println("Field: " + keyValue[0] + " Key Value length:" + keyValue.length);
            
            if (keyValue.length == 2) {    
                requiredDate = keyValue[1];
            } else {
                requiredDate = "";
            }
        }
    }
    
    return requiredDate;
}