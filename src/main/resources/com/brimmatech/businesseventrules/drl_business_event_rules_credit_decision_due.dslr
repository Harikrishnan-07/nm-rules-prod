package com.brimmatech.businesseventrules;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

function String getFolderIdsForCreditDecision(RulesDataDto rulesDataDto, int days) {
    String validFolderIds = "";
    String folderId = "";
    String applicationDate = "";

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    DateTimeFormatter withTimeFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ssa");

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("CreditDecision".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }

                    if ("ApplicationDate".equals(key)) {
                        applicationDate = value;
                    }
                }

                if (folderId.length() > 0 && applicationDate.length() > 0) {
                    LocalDate tempApplicationDate = parseApplicationDate(applicationDate, withTimeFormatter);
                    if (isCreditDecisionDue(tempApplicationDate, days)) {
                        if (!validFolderIds.isEmpty()) {
                            validFolderIds += ",";
                        }
                        validFolderIds += folderId;
                        folderId = "";
                        applicationDate = "";
                    }
                }
            }
        }
    }

    return validFolderIds;
}
    
    
function String getFolderIdsForRespaApplication(RulesDataDto rulesDataDto) {
    
    String folderId = "";
    String oldData = "";
    String updatedData = "";

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("RespaApplication".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    } else if ("beforeData".equals(key)) {
                        oldData = value;
                    } else if ("afterData".equals(key)) {
                        updatedData = value;
                    }
                }

                if (!folderId.isEmpty() && !oldData.isEmpty() && !updatedData.isEmpty()) {
                    if (!validCdcPayloadData(oldData, updatedData)) {
                        folderId = "";
                    }
                    break;
                }
            }
        }
    }

    return folderId;
}

function boolean validCdcPayloadData(String oldData, String updatedData) {

    String oldApplicationDate = extractApplicationDate(oldData);
    String updatedApplicationDate = extractApplicationDate(updatedData);

    return (oldApplicationDate.equals("null") || oldApplicationDate.isEmpty()) && !updatedApplicationDate.equals("null");
}

function String extractApplicationDate(String data) {

    String[] keyValuePairs = data.substring(1, data.length() - 1).split(", ");

    for (String pair : keyValuePairs) {
        String[] keyValue = pair.split("=");
        if ("applicationdate".equals(keyValue[0])) {
            return keyValue[1];
        }
    }
    return "";
}