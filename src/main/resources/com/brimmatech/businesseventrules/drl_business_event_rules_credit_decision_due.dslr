package com.brimmatech.businesseventrules;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

function String getFolderIdsForCreditDecision(RulesDataDto rulesDataDto, int days) {
    String validFolderIds = "";
    String folderId = "";
    String applicationDate = "";

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    DateTimeFormatter withTimeFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ssa");

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("CreditDecision".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }

                    if ("ApplicationDate".equals(key)) {
                        applicationDate = value;
                    }
                }

                if (folderId.length() > 0 && applicationDate.length() > 0) {
                    LocalDate tempApplicationDate = parseApplicationDate(applicationDate, withTimeFormatter);
                    if (isCreditDecisionDue(tempApplicationDate, days)) {
                        if (!validFolderIds.isEmpty()) {
                            validFolderIds += ",";
                        }
                        validFolderIds += folderId;
                        folderId = "";
                        applicationDate = "";
                    }
                }
            }
        }
    }

    return validFolderIds;
}
    
    
function String getFolderIdsForRespaApplication(RulesDataDto rulesDataDto) {

        String validFolderIds = "";
        String folderId = "";
        String beforeData = "";
        String afterData = "";

        for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
            String ruleName = rulesData.getRuleName();

            if ("RespaApplication".equals(ruleName)) {
                List<String> rulesDataList = rulesData.getRuleDataList();

                for (String ruleData : rulesDataList) {
                    String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {

                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        folderId = value;
                    }

                    if ("beforeData".equals(key)) {
                        beforeData = value;
                    }

                    if ("afterData".equals(key)) {
                        afterData = value;
                    }
                }

                if (folderId.length() > 0 && beforeData.length() > 0
                        && afterData.length() > 0 && validCdcPayloadData(beforeData, afterData))
                {

                    if (!validFolderIds.isEmpty()) {
                        validFolderIds += ",";
                    }
                    validFolderIds += folderId;
                    folderId = "";
                    beforeData = "";
                    afterData = "";
                }
            }
        }
    }

    return validFolderIds;
}    

function boolean validCdcPayloadData(String beforeData, String afterData) {

    String[] keyValuePairsBeforeData = beforeData.substring(1, beforeData.length() - 1).split(", ");
    String[] keyValuePairsAfterData = afterData.substring(1, afterData.length() - 1).split(", ");

    Map<String, String> beforeMap = new HashMap<>();
    Map<String, String> afterMap = new HashMap<>();

    for (String pair : keyValuePairsBeforeData) {
        String[] keyValueCdcData = pair.split("=");
        beforeMap.put(keyValueCdcData[0], keyValueCdcData[1]);
    }

    for (String pair : keyValuePairsAfterData) {
        String[] keyValueCdcData = pair.split("=");
        afterMap.put(keyValueCdcData[0], keyValueCdcData[1]);
    }

    String beforeApplicationDate = beforeMap.get("applicationdate");
    String afterApplicationDate = afterMap.get("applicationdate");

    return (beforeApplicationDate.trim().equals("null") || beforeApplicationDate.trim().equals("")) && afterApplicationDate != null;

}