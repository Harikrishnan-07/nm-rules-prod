package com.brimmatech.businesseventrules;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

function String retrieveFolderIdsForCreditDecision(RulesDataDto rulesDataDto, int days) {

    String validFolderIds = "";

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    DateTimeFormatter withTimeFormatter = DateTimeFormatter.ofPattern("MM/dd/yyyy hh:mm:ssa");

    for (RulesData rulesData : rulesDataDto.getRulesDataList()) {
        String ruleName = rulesData.getRuleName();

        if ("CreditDecision".equals(ruleName)) {
            List<String> rulesDataList = rulesData.getRuleDataList();

            for (String ruleData : rulesDataList) {
                String[] keyValue = ruleData.split("\\|");

                if (keyValue.length == 2) {
                    String key = keyValue[0];
                    String value = keyValue[1];

                    if ("FolderId".equals(key)) {
                        String folderId = value;

                        // Fetch and format ApplicationDate
                        LocalDate applicationDate = parseApplicationDate(value, withTimeFormatter);
                        
                        // Check if credit decision is due
                        if (isCreditDecisionDue(applicationDate, days)) {
                            if (!validFolderIds.isEmpty()) {
                                validFolderIds += ",";
                            }
                            validFolderIds += folderId;
                        }
                    }
                }
            }
        }
    }

    return validFolderIds;
}

function boolean isCreditDecisionDue(LocalDate applicationDate, int days) {
    LocalDate end = applicationDate.plusDays(days);
    return end.isEqual(LocalDate.now());
}

function LocalDate parseApplicationDate(String value, DateTimeFormatter formatter) {
    try {
        return LocalDate.parse(value, formatter);
    } catch (Exception e) {
        // If parsing with time fails, try parsing without time
        return LocalDate.parse(value, DateTimeFormatter.ofPattern("MM/dd/yyyy"));
    }
}
